AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  limited-chat-app

  This app is sample SAM app.
  This is a chat where the log disappears in 10 minutes.
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  PostMessageApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
  PostMessageFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: post-message/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Policies: AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        PostMessage:
          Type: Api
          Properties:
            Path: /postMessage
            Method: post
            RestApiId:
              Ref: PostMessageApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts
        External:
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-dynamodb"
  ListMessagesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
  ListMessagesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: list-messages/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Policies: AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        PostMessage:
          Type: Api 
          Properties:
            Path: /listMessages
            Method: get
            RestApiId:
              Ref: ListMessagesApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts
        External:
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-dynamodb"
  DeleteOldMessagesFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: delete-old-messages/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Policies: AmazonDynamoDBFullAccess
      Architectures:
        - x86_64
      Events:
        ScheduledFunction:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0/10 * * * ? *)
            ScheduleExpressionTimezone: "Asia/Tokyo"
            State: ENABLED
            Name: limited-chat-app-delete-old-messages-function-schedule
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts
        External:
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-dynamodb"
  ChatTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatTable
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
  LimitedChatAppApiWebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Scope: REGIONAL
      Rules:
        - Action:
            Block: {}
          Name: rate-limit-rule-100-request-per-5-minutes
          Priority: 0
          Statement:
            RateBasedStatement:
              Limit: 100
              AggregateKeyType: IP
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: false
            MetricName: rate-limit-rule-100-request-per-5-minutes
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: limited-chat-app-waf-acl
  PostApiWebAclLimitedChatAppAssociations:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      WebACLArn: !GetAtt LimitedChatAppApiWebAcl.Arn
      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${PostMessageApi}/stages/Prod'
  ListApiWebAclLimitedChatAppAssociations:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      WebACLArn: !GetAtt LimitedChatAppApiWebAcl.Arn
      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ListMessagesApi}/stages/Prod'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PostMessageApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for PostMessage function"
    Value: !Sub "https://${PostMessageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/postMessage/"
  PostMessageFunction:
    Description: "Post Message Lambda Function ARN"
    Value: !GetAtt PostMessageFunction.Arn
  PostMessageFunctionIamRole:
    Description: "Implicit IAM Role created for Post Message function"
    Value: !GetAtt PostMessageFunctionRole.Arn
  ListMessagesApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for ListMessages function"
    Value: !Sub "https://${ListMessagesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/listMessages/"
  ListMessageFunction:
    Description: "List Messages Lambda Function ARN"
    Value: !GetAtt ListMessagesFunction.Arn
  ListMessagesFunctionIamRole:
    Description: "Implicit IAM Role created for List Messages function"
    Value: !GetAtt ListMessagesFunctionRole.Arn
